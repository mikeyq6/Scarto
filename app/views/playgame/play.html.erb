<h1>Playing!</h1>

<h4>Welcome <%= @gameObj.firstname %>

<h4>Players: </h4>

<div class="players row">
    <% @game.players.each do |p| %>
    <% if p.type == 1 %>
    <div class="player type-computer col-6">
        <h4><%= p.name %>

        <div class="hand">
            <% p.hand.each do |card| %>
            <div class="gamecard">
                <%= image_tag(card.generate_image_name(p.type), class: 'card_img') %>
            </div>
            <% end %>
        </div>
    </div>
    <% end %>
    <% end %>
</div>

<% if @game.state.stock.size > 0 %>
<div class="stock">
    <% @game.state.stock.each do |card| %>
    <div class="stockcard">
        <%= image_tag(card.generate_image_name(Player.HUMAN), id: "#{card.suit}_#{card.number}", class: 'card_img',
                'data-suit':card.suit, 'data-number':card.number, 
                draggable: 'true', ondragstart: 'dragStart(event)', ondrop:'dragEnd(event)', ondragover:'allowDrop(event)') %>
    </div>
    <% end %>
</div>
<% end %>

<div class="players row">
    <% @game.players.each do |p| %>
    <% if p.type == 2 %>
    <div class="player type-human col-12">
        <h4><%= p.name %>

        <div class="hand">
            <% p.hand.each do |card| %>
            <div class="gamecard">
                <%= image_tag(card.generate_image_name(p.type), id: "#{card.suit}_#{card.number}", class: 'card_img', 
                    'data-suit': card.suit, 'data-number': card.number, 
                    draggable: 'true', ondragstart: 'dragStart(event)', ondrop:'dragEnd(event)', ondragover:'allowDrop(event)') %>
            </div>
            <% end %>
        </div>
    </div>
    <% end %>
    <% end %>
</div>


<script>
    document.querySelectorAll('.type-human .gamecard').forEach(
        (el, i) => { 
            el.addEventListener('mouseover', () => { el.classList.add('top'); });
            el.addEventListener('mouseout', () => { el.classList.remove('top'); }); 
        });

    const allowDrop = (ev) => {
        ev.preventDefault();
    };

    const dragStart = (ev) => {
        ev.dataTransfer.setData('text/plain', JSON.stringify(getCardData(ev.target)));
        ev.dataTransfer.effectAllowed = 'copy';
    };

    const dragEnd = (ev) => {
        ev.preventDefault();

        const data = JSON.parse(ev.dataTransfer.getData('text/plain'));
        console.log('data', data)

        const srcEl = document.querySelector('#' + data.id);
        const targetData = getCardData(ev.target);

        console.log('el', srcEl)
        console.log('targetData', targetData)

        checkCardIsSwappable(data, targetData)
            .then((responseData) => {
                result = JSON.parse(responseData);

                if(result.status === 'ok') {
                    console.log('ok, now do swap')
                    setCardData(ev.target, data);
                    setCardData(srcEl, targetData);
                }
                console.log('result', result);
            })
            .catch((result) => {
                console.log('result', result)
                console.log('failed')
            });

        console.log('el after', srcEl)
    };

    const getCardData = (cardImgEl) => {
        return {
            id: cardImgEl.id,
            suit: cardImgEl.dataset.suit,
            number: cardImgEl.dataset.number,
            imgSrc: cardImgEl.src
        };
    };

    const setCardData = (cardImgEl, data) => {
        cardImgEl.id = data.id;
        cardImgEl.dataset.suit = data.suit;
        cardImgEl.dataset.number = data.number;
        cardImgEl.src = data.imgSrc;
    };

    const checkCardIsSwappable = (sourceCardData, targetCardData) => {
        const xhr = new XMLHttpRequest();
        const url = '/play/<%=@gameObj.id%>/swap';
        const params = 'scSuit=' + sourceCardData.suit + '&scNumber=' + sourceCardData.number + '&tcSuit=' + targetCardData.suit + '&tcNumber=' + targetCardData.number
        const token = document.querySelector('meta[name="csrf-token"]').content;

        return new Promise((resolve, reject) => {
            xhr.open('POST', url, true); 

            xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); 
            // xhr.setRequestHeader("Content-length", params.length); 
            // xhr.setRequestHeader("Connection", "close");
            xhr.setRequestHeader("X-CSRF-Token", token);

            xhr.onload = () => { 
                if(xhr.readyState == 4 && xhr.status == 200) { 
                    resolve(xhr.responseText);
                } else {
                    reject('something happened:, xhr.status=' + xhr.status + ', xhr.readyState=' + xhr.readyState, ', xhr.status=', xhr.status);
                }
            }
            xhr.send(params);
        });
    };

</script>