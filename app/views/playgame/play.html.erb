<h1>Playing!</h1>

<h4>Welcome <%= @gameObj.firstname %>

<h5>It is currently <%= @game.state.current_player.name %>'s turn</h5>

<h4>Players: </h4>

<div class="players row">
    <% @game.players.each do |p| %>
    <% if p.type == 1 %>
    <div class="player type-computer col-6">
        <% if @game.state.first_player.name == p.name %>
        <i class="fa-solid fa-crown"></i>
        <% end %>
        <h4 class="<%= @game.state.first_player.name == p.name ? "first" : "" %>"><%= p.name %> Tricks won: <%=p.tricks.size%></h4>

        <div class="hand">
            <% p.hand.each do |card| %>
            <div class="gamecard">
                <%= image_tag(card.generate_image_name(p.type), class: 'card_img') %>
            </div>
            <% end %>
        </div>
    </div>
    <% end %>
    <% end %>
</div>

<div class="playing-field"
    ondrop="dragEnd(event)" ondragover="allowDrop(event)"
>
    <div class="row">
    <%  (0..@game.state.trick_length).each do |index| 
        marginTop = "#{(50 + (index * 30))}px"
        marginLeft = index == 0 ? '80px' : '-80px'
        card = @game.state.current_trick[index] 
        if card %>
        <div class="col">
            <div class="gamecard" style="margin-top: <%=marginTop%>; margin-left: <%=marginLeft%>">
                <%= image_tag(card.generate_image_name(Player.HUMAN), id: "#{card.suit}_#{card.number}", class: 'card_img') %>
            </div>
        </div>
        <% end %>
    <% end %>



    </div>
</div>

<div class="players row">
    <% @game.players.each do |p| %>
    <% if p.type == 2 %>
    <div class="player type-human col-12">
        <% if @game.state.first_player.name == p.name %>
        <i class="fa-solid fa-crown"></i>
        <% end %>
        <h4 class="<%= @game.state.first_player.name == p.name ? "first" : "" %>"><%= p.name %> Tricks won: <%=p.tricks.size%></h4>

        <div class="hand">
            <% p.hand.each do |card| %>
            <div class="gamecard">
                <%= image_tag(card.generate_image_name(p.type), id: "#{card.suit}_#{card.number}", class: 'card_img', 
                    'data-suit': card.suit, 'data-number': card.number, 
                    draggable: 'true', ondragstart: 'dragStart(event)') %>
            </div>
            <% end %>
        </div>
    </div>
    <% end %>
    <% end %>
</div>

<script>
    document.querySelectorAll('.type-human .gamecard').forEach(
        (el, i) => { 
            el.addEventListener('mouseover', () => { el.classList.add('top'); });
            el.addEventListener('mouseout', () => { el.classList.remove('top'); }); 
        });

    const allowDrop = (ev) => {
        ev.preventDefault();
    };

    const dragStart = (ev) => {
        ev.dataTransfer.setData('text/plain', JSON.stringify(getCardData(ev.target)));
        ev.dataTransfer.effectAllowed = 'copy';
    };

    const dragEnd = (ev) => {
        ev.preventDefault();

        const elData = JSON.parse(ev.dataTransfer.getData('text/plain'));

        
        srcEl = document.querySelector('#' + elData.id);
        const cardData = getCardData(srcEl);

        console.log('cardData', cardData)
        // console.log('ev', ev.target)
        //     srcData = elData

        // console.log('elData', elData)

        // let playedCard = `

        // `;


        playCard(cardData)
            .then((responseData) => {
                result = JSON.parse(responseData);

                if(result.status === 'ok') {
                    console.log('ok, play card')
                    // setCardData(targetEl, srcData);
                    marginTop = "<%=(50 + (@game.state.current_trick.size * 30))%>px";
                    marginLeft = "<%=@game.state.current_trick.size == 0 ? '80px' : '-80px' %>";
                    // const imgEl = srcEl.querySelector('img');
                    // console.log('imgEl', imgEl)
                    const cardPlayedHtml = `
                    <div class="col">
                        <div class="gamecard" style="margin-top: ${marginTop}; margin-left: ${marginLeft}">
                            <img src="${srcEl.src}" id="${srcEl.id}" class="card_img" />
                        </div>
                    </div>
                    `;
                    const playingFieldRow = document.querySelector('.playing-field .row');
                    playingFieldRow.insertAdjacentHTML("beforeend", cardPlayedHtml);
                    console.log('cardPlayedHtml', cardPlayedHtml)
                } else {
                    createToast(result.errorMessage);
                }
                console.log('result', result);
            })
            .catch((result) => {
                console.log('result', result)
                console.log('failed')
                    createToast(result);
            });
    };

    const playCard = (cardData) => {
        const xhr = new XMLHttpRequest();
        const url = '/play/<%=@gameObj.id%>/play_card';
        const params = 'cardSuit=' + cardData.suit + '&cardNumber=' + cardData.number
        const token = document.querySelector('meta[name="csrf-token"]').content;

        return new Promise((resolve, reject) => {
            xhr.open('POST', url, true); 

            xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); 
            xhr.setRequestHeader("X-CSRF-Token", token);

            xhr.onload = () => { 
                if(xhr.readyState == 4 && xhr.status == 200) { 
                    resolve(xhr.responseText);
                } else {
                    reject('something happened:, xhr.status=' + xhr.status + ', xhr.readyState=' + xhr.readyState, ', xhr.status=', xhr.status);
                }
            }
            xhr.send(params);
        });
    };

    const getCardData = (cardImgEl) => {
        return {
            id: cardImgEl.id,
            suit: cardImgEl.dataset.suit,
            number: cardImgEl.dataset.number,
            imgSrc: cardImgEl.src
        };
    };

    const createToast = (message) => {
        const toastHtml = `<div id="toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Game Error</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            ${message}
        </div>
        </div>`;

        document.getElementById('toast-container').insertAdjacentHTML("afterbegin", toastHtml);
        const toast = new bootstrap.Toast(document.getElementById('toast'));
        toast.show();
    };

</script>
